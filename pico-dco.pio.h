// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------- //
// frequency //
// --------- //

#define frequency_wrap_target 0
#define frequency_wrap 17

static const uint16_t frequency_program_instructions[] = {
            //     .wrap_target
    0x0040, //  0: jmp    x--, 0                     
    0xb027, //  1: mov    x, osr          side 0     
    0x0042, //  2: jmp    x--, 2                     
    0xa027, //  3: mov    x, osr                     
    0x0044, //  4: jmp    x--, 4                     
    0xa027, //  5: mov    x, osr                     
    0x0046, //  6: jmp    x--, 6                     
    0xa027, //  7: mov    x, osr                     
    0x0048, //  8: jmp    x--, 8                     
    0xa027, //  9: mov    x, osr                     
    0x004a, // 10: jmp    x--, 10                    
    0xa027, // 11: mov    x, osr                     
    0x004c, // 12: jmp    x--, 12                    
    0xa027, // 13: mov    x, osr                     
    0x004e, // 14: jmp    x--, 14                    
    0xa027, // 15: mov    x, osr                     
    0x0050, // 16: jmp    x--, 16                    
    0xb822, // 17: mov    x, y            side 1     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program frequency_program = {
    .instructions = frequency_program_instructions,
    .length = 18,
    .origin = -1,
};

static inline pio_sm_config frequency_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + frequency_wrap_target, offset + frequency_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}
#endif

// ---------------- //
// frequency_pulse1 //
// ---------------- //

#define frequency_pulse1_wrap_target 0
#define frequency_pulse1_wrap 19

static const uint16_t frequency_pulse1_program_instructions[] = {
            //     .wrap_target
    0x0040, //  0: jmp    x--, 0                     
    0xa027, //  1: mov    x, osr                     
    0xe000, //  2: set    pins, 0                    
    0x0043, //  3: jmp    x--, 3                     
    0xa027, //  4: mov    x, osr                     
    0x0045, //  5: jmp    x--, 5                     
    0xa027, //  6: mov    x, osr                     
    0x0047, //  7: jmp    x--, 7                     
    0xa027, //  8: mov    x, osr                     
    0x0049, //  9: jmp    x--, 9                     
    0xa027, // 10: mov    x, osr                     
    0x004b, // 11: jmp    x--, 11                    
    0xa027, // 12: mov    x, osr                     
    0x004d, // 13: jmp    x--, 13                    
    0xa027, // 14: mov    x, osr                     
    0x004f, // 15: jmp    x--, 15                    
    0xa027, // 16: mov    x, osr                     
    0x0051, // 17: jmp    x--, 17                    
    0xa022, // 18: mov    x, y                       
    0xe001, // 19: set    pins, 1                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program frequency_pulse1_program = {
    .instructions = frequency_pulse1_program_instructions,
    .length = 20,
    .origin = -1,
};

static inline pio_sm_config frequency_pulse1_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + frequency_pulse1_wrap_target, offset + frequency_pulse1_wrap);
    return c;
}

void init_sm_pin(PIO pio, uint sm, uint offset, uint pin) {
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_sm_config c = frequency_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_set_pins(&c, pin, 1);
    pio_sm_init(pio, sm, offset, &c);
}

#endif
